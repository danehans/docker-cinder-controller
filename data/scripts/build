#!/bin/bash
#
# Script to create and run docker-cinder-controller image.
#
set -x
set -e

# Check for Root user
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root or with sudo"
    exit 1
fi

# docker-cinder-controller Github Repo Name
export REPO_NAME="${REPO_NAME:-}"

# docker-cinder-controller Github Repo branch
export REPO_BRANCH="${REPO_BRANCH:-}"

# The name of the Docker base image.
# This should be a RHEL7 image with systemd.
export BASE_IMAGE="${BASE_IMAGE:-rhel7-systemd}"

# Configure the Docker Cinder Controller Image Name
export IMAGE_NAME="${IMAGE_NAME:-cinder-controller}"

# Configure the DB Host
export DB_HOST="${DB_HOST:-}"

# Configure the DB Password
export DB_PASSWORD="${DB_PASSWORD:-changeme}"

# Configure the RabbitMQ Host
export RABBIT_HOST="${RABBIT_HOST:-}"

# Configure the RabbitMQ User ID
export RABBIT_USER="${RABBIT_USER:-guest}"

# Configure the RabbitMQ User Password
export RABBIT_PASSWORD="${RABBIT_PASSWORD:-guest}"

# IP Address/Hostname of the Keystone server.
export KEYSTONE_HOST="${KEYSTONE_HOST:-127.0.0.1}"

# Configure the TCP port used to connect to the Keystone Admin API.
export KEYSTONE_ADMIN_HOST_PORT="${KEYSTONE_ADMIN_HOST_PORT:-35357}"

# Configure the TCP port used to connect to the Keystone Public API.
export KEYSTONE_PUBLIC_HOST_PORT="${KEYSTONE_PUBLIC_HOST_PORT:-5000}"

# Configure the Service Tenant
export SERVICE_TENANT="${SERVICE_TENANT:-service}"

# Configure the Service Password
export SERVICE_PASSWORD="${SERVICE_PASSWORD:-changeme}"

# Configure the Admin User Password for the admin-openrc file
export ADMIN_USER_PASSWORD="${ADMIN_USER_PASSWORD:-changeme}"

# Configure the Demo User Password for the demo-openrc file
export DEMO_USER_PASSWORD="${DEMO_USER_PASSWORD:-changeme}"

# IP address/Hostname of the Glance API server.
export GLANCE_API_HOST="${GLANCE_API_HOST:-127.0.0.1}"

# Install docker-cinder-controller project
if ! [ -d $HOME/docker-cinder-controller ]; then
  git clone -b $REPO_BRANCH https://github.com/danehans/docker-cinder-controller.git $HOME/docker-cinder-controller
fi

if ! [ -f $HOME/docker-cinder-controller/Dockerfile ]; then
  cat <<EOF > $HOME/docker-cinder-controller/Dockerfile
# Cinder Controller
# VERSION               0.0.1
# Tested on RHEL7 and OSP5 (i.e. Icehouse)

FROM $BASE_IMAGE
MAINTAINER Daneyon Hansen "daneyonhansen@gmail.com"

# Set environment variables within the Cinder Controller image/container.
ENV DB_HOST $DB_HOST
ENV DB_PASSWORD $DB_PASSWORD
ENV RABBIT_HOST $RABBIT_HOST
ENV RABBIT_USER $RABBIT_USER
ENV RABBIT_PASSWORD $RABBIT_PASSWORD
ENV KEYSTONE_HOST $KEYSTONE_HOST 
ENV KEYSTONE_ADMIN_HOST_PORT $KEYSTONE_ADMIN_HOST_PORT
ENV KEYSTONE_PUBLIC_HOST_PORT $KEYSTONE_PUBLIC_HOST_PORT
ENV SERVICE_TENANT $SERVICE_TENANT
ENV SERVICE_PASSWORD $SERVICE_PASSWORD
ENV DEMO_USER_PASSWORD $DEMO_USER_PASSWORD
ENV ADMIN_USER_PASSWORD $ADMIN_USER_PASSWORD
ENV GLANCE_API_HOST $GLANCE_API_HOST

# Set working directory for RUN and CMD instructions.
WORKDIR /root

# Required Utilities. 
RUN yum -y install openssl ntp wget rubygems
RUN systemctl enable ntpd

# Tiller Installation. For more info: https://github.com/markround/tiller
RUN gem install tiller
ADD data/tiller/common.yaml /etc/tiller/common.yaml
ADD data/tiller/environments/production.yaml /etc/tiller/environments/production.yaml
ADD data/tiller/templates/cinder.conf.erb /etc/tiller/templates/cinder.conf.erb
ADD data/tiller/templates/admin-openrc.erb /etc/tiller/templates/admin-openrc.erb
ADD data/tiller/templates/demo-openrc.erb /etc/tiller/templates/demo-openrc.erb

# Install Cinder Controller Packages
RUN yum -y install openstack-cinder

# Run Tiller to populate conf and RC files.
RUN /usr/local/bin/tiller

# Enable cinder-controller services
RUN systemctl enable openstack-cinder-api
RUN systemctl enable openstack-cinder-scheduler

# Initialize the Cinder MySQL DB
RUN cinder-manage db sync

# Expose Cinder Controller TCP ports
EXPOSE 8776

# Start Init
CMD ["/usr/sbin/init"]
EOF
fi

echo 'Dockerfile generated. Now building image'

sudo docker build -t $IMAGE_NAME $HOME/docker-cinder-controller

exit $?
